// node imports
import Path from 'path'
import Fs from 'fs'

// npm imports
import CliColor from 'cli-color'

// local imports
import Utils from "../utils.js";




///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//	
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/**
 * @typedef {Object} EvaluationReportOptions
 * @property {Boolean} verbose
 */

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//	
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

export default class EvaluationReport {

	/**
	 * @param {string} evaluationName
	 * @param {Partial<EvaluationReportOptions>} partialOptions
	 */
	static async display(evaluationName, partialOptions = {}) {

		// handle default options
		partialOptions = Object.assign({}, /** @type {EvaluationReportOptions} */({
			verbose: false,
		}), partialOptions)
		const options = /** @type {EvaluationReportOptions} */(partialOptions)

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//      build report array
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		const predictionNames = await Utils.getPredictionNames(evaluationName)
		for (const predictionName of predictionNames) {
			const reportJson = await Utils.buildReportJson(evaluationName, predictionName)
			const predictionMetadataJson = await Utils.loadPredictionMetadataJson(evaluationName, predictionName)

			// Compute statistics
			let validCount = 0
			for (const reportItem of reportJson) {
				if (reportItem.predictionValid) validCount += 1
			}
			const evaluationScore = validCount / reportJson.length

			///////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////
			//	
			///////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////

			const cliColorName = evaluationScore === 1 ? 'green' : evaluationScore >= 0.8 ? 'yellow' : 'red'
			console.log(`${CliColor.blue(`OUTPUT REPORT FOR ${predictionName}`)}: score ${CliColor[cliColorName]((evaluationScore * 100).toFixed(2) + '%')}`)
			// if (options.verbose) {
			// 	console.log(`${JSON.stringify(reportJson, null, '\t')}`)
			// }
			// debugger
			for (const optionName of Object.keys(predictionMetadataJson.explicitOptions)) {
				console.log(`\t- Explicit ${optionName}: ${predictionMetadataJson.explicitOptions[optionName]}`)
			}

			///////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////
			//	display statistics
			///////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////

			// console.log(`\tDataset count: ${reportJson.length} items (${validCount} valid/${reportJson.length-validCount} invalid)`)
			// console.log(`\tEvaluation score: ${(evaluationScore * 100).toFixed(2)}%`)

			///////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////
			//	if verbose, display invalid items
			///////////////////////////////////////////////////////////////////////////////
			///////////////////////////////////////////////////////////////////////////////

			if (evaluationScore < 1 && options.verbose === true) {
				// display invalid items
				for (const reportItem of reportJson) {
					const itemIndex = reportJson.indexOf(reportItem)
					if (reportItem.predictionValid) continue
					console.log(CliColor.red(`\titem ${itemIndex} INVALID`))
					console.log(`\t- User input: ${CliColor.cyan(reportItem.userInput)}`)
					console.log(`\t- Expected response: ${CliColor.cyan(reportItem.expectedResponse)}`)
					console.log(`\t- Predicted response: ${CliColor.cyan(reportItem.predictedResponse)}`)
					// console.log(JSON.stringify(reportItem, null, '\t'))
				}
			}
		}
	}
}
