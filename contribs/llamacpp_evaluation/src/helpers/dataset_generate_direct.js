/**
 * - from https://js.langchain.com/docs/modules/model_io/models/llms/integrations/llama_cpp
 */

// node imports
import Path from "path";
import Fs from 'fs'

// npm imports
import { LlamaModel, LlamaContext, LlamaChatSession, LlamaGrammar, LlamaJsonSchemaGrammar, LlamaChatPromptWrapper } from "node-llama-cpp";
import CliColor from "cli-color";
import Zod from "zod";
import { zodToJsonSchema } from "zod-to-json-schema";
import Json5 from "json5";

// local imports
import LlamaUtils from "../../../../src/llama-utils.js";
import Utils from "../../src/utils.js";
import ModelPathContants from "../../../../src/model_path_constants.js";

// get __dirname in esm module
import Url from "url";
const __dirname = Path.dirname(Url.fileURLToPath(import.meta.url));

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//	
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

/**
 * @typedef {Object} DatasetGenerateDirectOptions
 * @property {string} modelName
 * @property {number} nQuestions
 * @property {Boolean} verbose
 */

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//	
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

export default class DatasetGenerateDirect {

	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	//	
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////

	static defaultGenerateOptions =  /** @type {DatasetGenerateDirectOptions} */({
		// modelName: ModelPathContants.CODELLAMA_13B_INSTRUCT_Q3_K_M,
		modelName: ModelPathContants.LLAMA_2_13B_CHAT_Q3_K_M,
		nQuestions: 1,
		verbose: false,
	})

	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	//	
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////

	/**
	 * 
	 * @param {Partial<DatasetGenerateDirectOptions>} partialOptions
	 */
	static async generateStateUnionQa(partialOptions = {}) {

		// handle default options
		partialOptions = Object.fromEntries(Object.entries(partialOptions).filter(([k, v]) => v !== undefined));
		partialOptions = Object.assign({}, DatasetGenerateDirect.defaultGenerateOptions, partialOptions)
		const options = /** @type {DatasetGenerateDirectOptions} */(partialOptions)

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	init parameters
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		
		// create record zod schema
		const recordZodSchema = Zod.object({
			question: Zod.string().describe('a short clear question based on the context'),
			answer: Zod.string().describe('the response to the question'),
		})
		// load the context we want to use
		const context = await Utils.loadContextSynthetic()

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	generate recordsJson
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		
		// generate recordsJson
		const recordsJson = await DatasetGenerateDirect._generateRecordsFromZod(options.nQuestions, recordZodSchema, {
			context: context,
			modelName: options.modelName,
		})

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	Convert recordsJson to datasetJson
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		// build datasetJson
		const datasetJson = /** @type {import("../../src/type.d.js").DatasetJson} */([])
		for (const record of recordsJson) {
			const datasetItemJson = /** @type {import("../../src/type.d.js").DatasetItemJson} */({
				userInput: record.question,
				expectedResponse: record.answer,
				context: context,
			})
			datasetJson.push(datasetItemJson)
		}

		if (options.verbose) {
			console.log(`Response : ${CliColor.cyan(JSON.stringify(recordsJson, null, '\t'))}`)
		}

		// return datasetJson
		return datasetJson
	}

	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	//	s
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////

	/**
	 * @param {number} recordCount
	 * @param {Zod.Schema} recordZodSchema 
	 * @param {object} partialOptions
	 * @param {string=} partialOptions.modelName
	 * @param {string=} partialOptions.context
	 */
	static async _generateRecordsFromZod(recordCount, recordZodSchema, partialOptions = {}) {

		// handle default options
		partialOptions = Object.fromEntries(Object.entries(partialOptions).filter(([k, v]) => v !== undefined));
		const options = Object.assign({}, {
			modelName: ModelPathContants.MISTRAL_7B_INSTRUCT_V0_1_Q6_K,
			context: '',
		}, partialOptions)

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	build systemPrompt and userPrompt
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		// convert zodSchema to jsonSchema
		let recordJsonSchemaTyped = zodToJsonSchema(recordZodSchema)
		let recordJsonSchema = /** @type {object} */(JSON.parse(JSON.stringify(recordJsonSchemaTyped)))
		// 
		const fixtureProperties = /** @type {Object<string, string>} */({})
		Object.keys(recordJsonSchema.properties).forEach(property => {
			fixtureProperties[property] = recordJsonSchema.properties[property].description
		})

		// format the instructions
		let formatInstruction = ''
		Object.keys(fixtureProperties).forEach(property => {
			formatInstruction += `- ${property}: <${fixtureProperties[property].toUpperCase()}>\n`
		})
		formatInstruction = formatInstruction.trim()

		const systemPrompt = `Generate JSON Objects. each of them has:
${formatInstruction}

Format your response as a JSON array.`

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		let userPrompt = ''
		if (options.context) {
			userPrompt = `${options.context}
		
Now based on this context, generate ${recordCount} JSON Object${recordCount > 1 ? 's' : ''} in a array.`
		}

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	build llama grammar
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		const responseZodSchema = Zod.array(recordZodSchema)
		const responseJsonSchemaFull = zodToJsonSchema(responseZodSchema, "responseJsonSchema");
		const responseJsonSchema = /** @type {Object} */(responseJsonSchemaFull.definitions?.['responseJsonSchema'])
		const llamaGrammar = new LlamaJsonSchemaGrammar(responseJsonSchema)
		// const llamaGrammar = await LlamaGrammar.getFor('json')

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		const modelPath = Path.join(__dirname, '../../../../models', options.modelName)
		const { llamaContext } = await LlamaUtils.initModelAndContext(modelPath)

		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////
		//	
		///////////////////////////////////////////////////////////////////////////////
		///////////////////////////////////////////////////////////////////////////////

		const responseJson = await LlamaUtils.promptGrammarJsonOne(llamaContext, llamaGrammar, systemPrompt, userPrompt, true)

		// debugger
		return responseJson
	}
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//	Usage example
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

async function mainAsync() {
	await DatasetGenerateDirect.generateStateUnionQa({
		modelName: ModelPathContants.MISTRAL_7B_INSTRUCT_V0_1_Q6_K,
		nQuestions: 1,
		verbose: true,
	})
}

// run mainAsync() if this file is run directly from node.js
import { fileURLToPath } from 'url';
if (process.argv[1] === fileURLToPath(import.meta.url)) await mainAsync()